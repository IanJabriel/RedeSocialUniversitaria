// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedeSocialUniversidade.Infra;

#nullable disable

namespace RedeSocialUniversidade.Infra.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20250415032318_InscricaoEvento")]
    partial class InscricaoEvento
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostagemId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("PostagemId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Curtida", b =>
                {
                    b.Property<int>("PostagemId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("PostagemId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Curtida");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExigeInscricao")
                        .HasColumnType("bit");

                    b.Property<int>("LimiteParticipantes")
                        .HasColumnType("int");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.InscricaoEvento", b =>
                {
                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInscricao")
                        .HasColumnType("datetime2");

                    b.HasKey("EventoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("InscricaoEvento");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Postagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Postagens");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Seguidor", b =>
                {
                    b.Property<int>("UsuarioSeguidoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioSeguidorId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioSeguidoId", "UsuarioSeguidorId");

                    b.HasIndex("UsuarioSeguidorId");

                    b.ToTable("Seguidor");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Comentario", b =>
                {
                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Usuario", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Postagem", "Postagem")
                        .WithMany("Comentarios")
                        .HasForeignKey("PostagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Postagem");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Curtida", b =>
                {
                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Postagem", "Postagem")
                        .WithMany("Curtidas")
                        .HasForeignKey("PostagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Postagem");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.InscricaoEvento", b =>
                {
                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Evento", "Evento")
                        .WithMany("Inscricoes")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Postagem", b =>
                {
                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Usuario", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Seguidor", b =>
                {
                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Usuario", "UsuarioSeguido")
                        .WithMany("Seguidores")
                        .HasForeignKey("UsuarioSeguidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedeSocialUniversidade.Domain.Entities.Usuario", "UsuarioSeguidor")
                        .WithMany()
                        .HasForeignKey("UsuarioSeguidorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsuarioSeguido");

                    b.Navigation("UsuarioSeguidor");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Evento", b =>
                {
                    b.Navigation("Inscricoes");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Postagem", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Curtidas");
                });

            modelBuilder.Entity("RedeSocialUniversidade.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Seguidores");
                });
#pragma warning restore 612, 618
        }
    }
}
